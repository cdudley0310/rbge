colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)) %>%
mutate_all(replace_na(0)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_all(replace_na(0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.na, replace_na(0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.na, ~replace_na(., 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.numeric, ~replace_na(., 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0)) %>%
mutate_all(type.convert) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_all(type.convert) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_all(type.convert) %>%
mutate_if(is.na, ~replace_na(., 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_all(type.convert) %>%
mutate_if(is.numeric, ~replace_na(., 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
library(knitr) # for r markdown control
library(kableExtra) # r markdown extras
# a prefix nulling hook.
# make sure to keep the default for normal processing
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect '\\s*[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
default_output_hook(x, options)
})
# set knitr defaults
knitr::opts_chunk$set(cache = TRUE,
cache.comments = FALSE,
comment = NA, # remove ## from output
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = 'center',
null_prefix = TRUE) # remove [1] from output
library(tidyverse) # for general data manipulation
# tibble containing information for all species found in Brazil
(data <- read_csv('nordeste.csv'))
# tibble containing all taxa found in the phylogeny
(phylo <- read_csv('alignment_table.csv'))
# remove OUTSIDE taxa from the data; total of 248 OUTSIDE taxa removed
(phylo <- phylo %>%
filter(str_detect(Taxon, 'OUTSIDE', negate = TRUE)) %>%
mutate(Combination = str_replace(Taxon, '.*aceae\\s', '')))
### phylo$Combination <- sub('.*aceae ', '', phylo$Taxon)
# select only the species from the data which were used to create the phylogeny
(stats <- semi_join(data, phylo, by = 'Combination'))
# 6 taxa were renamed during the ncbi search and their synonym equivalent
# in the data could not be found; they are tacked on to the end of
# the stats data for completeness as they were used in the tree
(stats <- phylo %>%
select(Combination) %>%
setdiff(select(stats, Combination)) %>%
mutate(Family = c('Bromeliaceae', 'Fabaceae', 'Fabaceae',
'Fabaceae', 'Poaceae', 'Poaceae')) %>%
full_join(stats, .))
tbl_func <- function(x, y, States = FALSE){ # function to create % tables
# x -- variable from the overall set of data
# y -- variable from the phylogeny subset
# States -- whether or not the variable of interest is the location (state)
# data frame containing counts and percentages of overall data
tbl.x <- x
res.x <- data.frame(cbind(row.names(tbl.x), tbl.x,
if(States == TRUE) {round(tbl.x / length(data[, 1]) * 100, 2)
} else {
round(prop.table(tbl.x) * 100, 2)}))
colnames(res.x) <- c('id', 'data_Count', 'data_Percentage')
# data frame containing counts and percentages of phylogeny data
tbl.y <- y
res.y <- data.frame(cbind(row.names(tbl.y), tbl.y,
if(States == TRUE) {
round(tbl.y / length(stats[, 1]) * 100, 2)
} else {
round(prop.table(tbl.y) * 100, 2)}))
colnames(res.y) <- c('id', 'tree_Count', 'tree_Percentage')
# join the above data frames and add a column showing the
# percentage of overall data that is found in the tree
res <- full_join(res.x, res.y, by = 'id')
# rename any empty id names 'Unknown'
(res <- res %>%
mutate(id = str_replace(id, '^$', 'Unknown')) %>%
mutate_all(type.convert) %>%
mutate_if(is.numeric, ~replace_na(., 0)) %>%
# column showing the percentage of overall data that is found in the tree
mutate(total_Percentage = round(tree_Count / data_Count * 100, 2)))
}
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
family_tbl[order(-family_tbl$tree_Percentage), ] %>%
kable(format = 'markdown', caption = 'Family -- A table showing the count and percentages of taxa per family. data_Count: Number of taxa in the overall data from family X. data_Percentage: Percentage of overall data composed of taxa from family X. tree_Count: Number of taxa in the tree family X. tree_Percentage: Percentage of the tree composed of taxa from family X. total_Percentage: Percentage of all taxa from family X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c('repeat_header', 'striped'), repeat_header_text = 'Family (continued)', repeat_header_method = 'replace')
lifeform_tbl <- tbl_func(table(data$Formas_de_Vida), table(stats$Formas_de_Vida))
lifeform_tbl[order(-lifeform_tbl$tree_Percentage), ]
lifeform_tbl[order(-lifeform_tbl$tree_Percentage), ] %>%
kable('latex', caption = 'Lifeform -- A table showing the count and percentages of taxa by lifeform. data_Count: Number of taxa in the overall data exhibiting lifeform X. data_Percentage: Percentage of overall data composed of taxa exhibiting lifeform X. tree_Count: Number of taxa in the tree exhibiting lifeform X. tree_Percentage: Percentage of the tree composed of taxa exhibiting lifeform X. total_Percentage: Percentage of all taxa exhibiting lifeform X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
column_spec(1, width = '10em') %>%
kable_styling(latex_options = c('repeat_header', 'striped', 'hold_position'), repeat_header_text = 'Lifeform (continued)', repeat_header_method = 'replace')
domain_tbl <- tbl_func(table(data$Dom_Fitogeografico), table(stats$Dom_Fitogeografico))
domain_tbl[order(-domain_tbl$tree_Percentage), ]
domain_tbl[order(-domain_tbl$tree_Percentage), ] %>%
kable('latex', caption = 'Phytogeographic Domain -- A table showing the count and percentages of taxa by phytogeographic domain. data_Count: Number of taxa in the overall data found in domain X. data_Percentage: Percentage of overall data composed of taxa which can be found in domain X. tree_Count: Number of taxa in the tree found in domain X. tree_Percentage: Percentage of the tree composed of taxa which can be found in domain X. total_Percentage: Percentage of all taxa which can be found in domain X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
column_spec(1, width = '10em') %>%
kable_styling(latex_options = c('repeat_header', 'striped', ' hold_position'), repeat_header_text = 'Phytogeographic Domain', repeat_header_method = 'replace')
states_tbl <- tbl_func(data.frame(colSums(data[10:36])), data.frame(colSums(stats[10:36], na.rm = TRUE)),
States = TRUE)
states_tbl[order(-states_tbl$tree_Percentage), ]
states_tbl[order(-states_tbl$tree_Percentage), ] %>%
kable('latex', caption = 'States -- A table showing the count and percentages of taxa per Brazillian state. data_Count: Number of taxa in the overall data found in state X. data_Percentage: Percentage of overall data composed of taxa which can be found in state X. tree_Count: Number of taxa in the tree found in state X. tree_Percentage: Percentage of the tree composed of taxa which can be found in state X. total_Percentage: Percentage of all taxa which can be found in state X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c('repeat_header', 'striped', 'hold_position'), repeat_header_text = 'States (continued)', repeat_header_method = 'replace')
library(dplyr)
library(phylotools)
# alignment data
alignment <- read.phylip(file.path('..', 'results', 'alignments',
'combined_alignment', 'final_combined_alignment'))
alignment$family <- factor(str_replace_all(alignment$seq.name, '_.*', ''))
# phylogenetic tree data
tree <- read.tree(file.path
('..', 'results', 'trees', 'combined_tree', 'combined_tree.tree'))
tree$node.label <- as.numeric(tree$node.label)
# create a column displaying the number of missing values per species
alignment$missing <- map_dbl(alignment$seq.text, function(x) {
length(unlist(str_extract_all(x, ('[^ATCG]'))))
}) # 20,376 total loci per taxa
summary(alignment$missing) / 20376 * 100 # summary of missing percentages
kable(summary(alignment$missing) / 20376 * 100, caption = 'A summary of missing percentages', booktabs = TRUE, linesep = '') %>%
kable_styling(latex_options = c('striped', 'hold_position'))
family_tbl <- tbl_func(table(data$Family), table(stats$Family))
family_tbl[order(-family_tbl$tree_Percentage), ]
?column_spec
domain_tbl[order(-domain_tbl$tree_Percentage), ] %>%
kable('pandoc', caption = 'Phytogeographic Domain -- A table showing the count and percentages of taxa by phytogeographic domain. data_Count: Number of taxa in the overall data found in domain X. data_Percentage: Percentage of overall data composed of taxa which can be found in domain X. tree_Count: Number of taxa in the tree found in domain X. tree_Percentage: Percentage of the tree composed of taxa which can be found in domain X. total_Percentage: Percentage of all taxa which can be found in domain X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
column_spec(column = 'id', width = '10em') %>%
kable_styling(latex_options = c('repeat_header', 'striped', ' hold_position'), repeat_header_text = 'Phytogeographic Domain', repeat_header_method = 'replace')
lifeform_tbl[order(-lifeform_tbl$tree_Percentage), ] %>%
kable('pandoc', caption = 'Lifeform -- A table showing the count and percentages of taxa by lifeform. data_Count: Number of taxa in the overall data exhibiting lifeform X. data_Percentage: Percentage of overall data composed of taxa exhibiting lifeform X. tree_Count: Number of taxa in the tree exhibiting lifeform X. tree_Percentage: Percentage of the tree composed of taxa exhibiting lifeform X. total_Percentage: Percentage of all taxa exhibiting lifeform X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
column_spec(1, width = '10em') %>%
kable_styling(latex_options = c('repeat_header', 'striped', 'hold_position'), repeat_header_text = 'Lifeform (continued)', repeat_header_method = 'replace')
?kable_styling
?kable
domain_tbl[order(-domain_tbl$tree_Percentage), ] %>%
kable('pandoc', caption = 'Phytogeographic Domain -- A table showing the count and percentages of taxa by phytogeographic domain. data_Count: Number of taxa in the overall data found in domain X. data_Percentage: Percentage of overall data composed of taxa which can be found in domain X. tree_Count: Number of taxa in the tree found in domain X. tree_Percentage: Percentage of the tree composed of taxa which can be found in domain X. total_Percentage: Percentage of all taxa which can be found in domain X used in the tree.', booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c('repeat_header', 'striped', ' hold_position'), repeat_header_text = 'Phytogeographic Domain', repeat_header_method = 'replace') %>%
column_spec(2, width = '10em')
?column_spec
install.packages('kableExtra')
