"0","### seek_seqs ###"
"0",""
"0","seek_seqs <- function(x, GENE = NULL, SLEN = NULL, RET = 1, "
"0","                      REPLACEMENT = FALSE, OUTSIDE = FALSE, "
"0","                      WRITE = FALSE, ...){ "
"0","  "
"0","  # x = vector containing taxa names"
"0","  # GENE -- a string containing the gene region of interest"
"0","  # SLEN -- a string containing the length of desired sequences to be returned"
"0","  # RET -- the sequence ID to be returned from the NCBI database; "
"0","  #        defaults to the first sequence ID per species per desired gene; "
"0","  #        increase if replacing anomalous sequences"
"0","  # REPLACEMENT -- whether the search is being used to search "
"0","  #        for replacement sequences for deleted taxa or not"
"0","  # OUTSIDE -- whether the search is being used to search"
"0","  #        for taxa outside of the primary research area"
"0","  # WRITE -- whether to write the sequences to a fasta file or not; "
"0","  #        see `write_fasta` function for details and arguments"
"0","  # ... -- arguments to be passed on to the `write_fasta` function"
"0","  "
"0","  ## Error Codes ##"
"0","  "
"0","  if(missing(GENE)) stop('GENE argument missing with no default value')"
"0","  "
"0","  ## Generate Terms ##"
"0","  "
"0","  terms <- paste0(GENE, '[GENE] AND ',"
"0","                  x, '[PORG]', # search for primary organism only"
"0","                  if(!missing(SLEN)) {paste0(' AND ', SLEN, '[SLEN]')}) "
"0","  # example term: 'atpB[GENE] AND Hydrocleys_martii[PORG] AND 500:5000[SLEN]'"
"0","  "
"0","  ## ID Search ##"
"0","  "
"0","  print('Searching for IDs')"
"0","  "
"0","  # a function to find and create a vector of IDs from NCBI"
"0","  IDs <- unique(unlist(pblapply(terms, function(x){ "
"0","      tmp <- entrez_search(db = 'nucleotide',"
"0","                           term = x,"
"0","                           retmax = RET)"
"0","      # allow for 0.34 seconds between searches to comply with NCBI's wishes"
"0","      Sys.sleep(0.34) "
"0","    "
"0","      # create a vector of IDs found from the search of the NCBI database"
"0","      if(length(tmp$ids) > (RET - 1)){ "
"0","      IDs <- tmp$ids[[RET]]}"
"0","  })))"
"0","  if(length(IDs) == 0) stop('No IDs Found')"
"0","  "
"0","  ## Sequence Fetch ##"
"0","  "
"0","  print('Fetching Sequence Data')"
"0","  "
"0","  # a function which fetches sequence data in an xml format from NCBI based on "
"0","  # ID numbers obtained from the '### ID Search ###' section; results include"
"0","  # specimen accession number, taxonomy and sequence, as well as additional data"
"0","  seqs <- pblapply(IDs, function(x){ "
"0","      tmp <- entrez_fetch(db = 'nuccore', "
"0","                          id = x, "
"0","                          rettype = 'gbc', # download 'complete' data"
"0","                          retmode = 'xml') # in an xml format"
"0","      Sys.sleep(0.34)"
"0","    "
"0","      unlist(tmp, use.names = FALSE) "
"0","      # provides an R-friendly list of the xml data retrieved"
"0","      tmp <- xmlToList(tmp) "
"0","    "
"0","      # replaces the spaces in x with '_' to prevent the sequence label being "
"0","      # truncated when creating trees"
"0","      tmp$INSDSeq$INSDSeq_organism <- str_replace_all(tmp$INSDSeq$INSDSeq_organism, "
"0","                                                      '\\s', '_')"
"0","      tmp"
"0","  })"
"0","  "
"0","  ## Write Fasta File ##"
"0","  "
"0","  # see `write_fasta` function below for details"
"0","  if(WRITE == TRUE) {"
"0","      print('Writing Fasta File')"
"0","      write_fasta(seqs, GENE = GENE, OUTSIDE = OUTSIDE, ...) "
"0","  } "
"0","  "
"0","  ## Save Vector of Included Taxa ##"
"0","  "
"0","  # will save a vector, 'seqs', of combination names to the global "
"0","  # environment for comparison with sequence list edited following "
"0","  # clustering and visual inspection"
"0","  if(REPLACEMENT == FALSE & OUTSIDE == FALSE) "
"0","    seqs <<- map_chr(seqs, function(x){"
"0","                     str_replace(x$INSDSeq$INSDSeq_organism, '_[[:alpha:]]*\\..*$', '')"
"0","  }) "
"0","  "
"0","  if(REPLACEMENT == FALSE & OUTSIDE == TRUE) "
"0","    seqs <<- map_chr(seqs, function(x){"
"0","                     str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', '')"
"0","  }) "
"0","}"
"0",""
"0","### write_fasta ###"
"0",""
"0","write_fasta <- function(x, GENE = NULL, ACCESSION = FALSE, FAMILY = FALSE,"
"0","                        COMBINATION = FALSE, GENUS = FALSE, COMP = FALSE, "
"0","                        OUTSIDE = FALSE, APPEND = FALSE){ "
"0","  "
"0","  # x -- list of sequence data downloaded from NCBI"
"0","  # APPEND -- whether to append the data to an existing file or not; "
"0","  #           'APPEND = TRUE' when adding replacement and outside sequences"
"0","  # see below in '### Function ###' for information on other arguments"
"0","  "
"0","   ## Error Codes ##"
"0","  "
"0","  if(ACCESSION == FALSE & FAMILY == FALSE & "
"0","     COMBINATION == FALSE & GENUS == FALSE"
"0","     ) stop ('No labels provided for sequences; use ACCESSION, "
"0","             FAMILY, COMBINATION and/or GENUS arguments to "
"0","             provide labels for sequences')"
"0","  if(missing(GENE)"
"0","     ) stop ('GENE argument missing with no default value')"
"0","  "
"0","  ## Function ##"
"0","  "
"0","  fasta <- map_chr(x, function(x){"
"0","    paste0('>',"
"0","        if(ACCESSION == TRUE) paste0(x$INSDSeq$INSDSeq_locus, '_'),"
"0","        if(FAMILY == TRUE) paste0(str_extract(x$INSDSeq$INSDSeq_taxonomy, "
"0","                                              '[[:alpha:]]*aceae'), '_'), "
"0","        if(COMBINATION == TRUE) str_replace(x$INSDSeq$INSDSeq_organism,"
"0","                                            '_[[:alpha:]]*\\..*$', ''),"
"0","        if(GENUS == TRUE) str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', ''),"
"0","        if(COMP == TRUE) '_comp.', # for composite taxa"
"0","        if(OUTSIDE == TRUE) '_OUTSIDE', # for taxa outside the research area"
"0","        '\n', x$INSDSeq$INSDSeq_sequence)})"
"0","  "
"0","    # writes files to '../results/sequences/GENE/GENE_sequences.fasta' "
"0","    # or the Windows equivalent"
"0","    write(fasta, file.path('..', 'results', 'sequences', GENE, "
"0","                           paste0(GENE, '_sequences.fasta')), "
"0","                           append = APPEND) "
"0","}"
"0",""
"0","### del_taxa ###"
"0",""
"0","del_taxa <- function(x, OUTSIDE = FALSE) { "
"0","  "
"0","  # x -- the gene region of interest used to create the single gene tree; "
"0","  #      parameter should be written inside quotations"
"0","  # OUTSIDE -- whether or not we or comparing taxa outside of the research area"
"0","  "
"0","  if(OUTSIDE == FALSE) {"
"0","  tmp <- phylotools::read.fasta(file.path("
"0","         '..', 'results', 'sequences', x, "
"0","         paste0(x, '_sequences.fasta')))"
"0","  tmp <- str_extract(tmp$seq.name, '[[:alpha:]]*_[^_]*$')"
"0","  setdiff(seqs, tmp)"
"0","  } else{"
"0","    tmp <- phylotools::read.fasta(file.path("
"0","           '..', 'results', 'sequences', x, "
"0","           paste0(x, '_sequences.fasta')))"
"0","    tmp <- str_replace(tmp$seq.name, '^.*aceae_', '')"
"0","    tmp <- str_replace(tmp, '_.*$', '')"
"0","    setdiff(seqs, tmp)"
"0","    }"
"0","} # outputs contain the taxa removed, allowing for a replacement search"
