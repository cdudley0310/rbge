library(phylotools) # for importing and altering tree files
(data <- read_csv('nordeste.csv'))
# remove trait data and alter spaces in combination names
(data <- data %>%
select(Family:Combination) %>%
mutate(Combination = str_replace_all(Combination, ' ', '_')) %>%
slice(15:30))
### seek_seqs ###
seek_seqs <- function(x, GENE = NULL, SLEN = NULL, RET = 1,
REPLACEMENT = FALSE, OUTSIDE = FALSE,
WRITE = FALSE, ...){
# x = vector containing taxa names
# GENE -- a string containing the gene region of interest
# SLEN -- a string containing the length of desired sequences to be returned
# RET -- the sequence ID to be returned from the NCBI database;
#        defaults to the first sequence ID per species per desired gene;
#        increase if replacing anomalous sequences
# REPLACEMENT -- whether the search is being used to search
#        for replacement sequences for deleted taxa or not
# OUTSIDE -- whether the search is being used to search
#        for taxa outside of the primary research area
# WRITE -- whether to write the sequences to a fasta file or not;
#        see `write_fasta` function for details and arguments
# ... -- arguments to be passed on to the `write_fasta` function
## Error Codes ##
if(missing(GENE)) stop('GENE argument missing with no default value')
## Generate Terms ##
terms <- paste0(GENE, '[GENE] AND ',
x, '[PORG]', # search for primary organism only
if(!missing(SLEN)) {paste0(' AND ', SLEN, '[SLEN]')})
# example term: 'atpB[GENE] AND Hydrocleys_martii[PORG] AND 500:5000[SLEN]'
## ID Search ##
print('Searching for IDs')
# a function to find and create a vector of IDs from NCBI
IDs <- unique(unlist(pblapply(terms, function(x){
tmp <- entrez_search(db = 'nucleotide',
term = x,
retmax = RET)
# allow for 0.34 seconds between searches to comply with NCBI's wishes
Sys.sleep(0.34)
# create a vector of IDs found from the search of the NCBI database
if(length(tmp$ids) > (RET - 1)){
IDs <- tmp$ids[[RET]]}
})))
if(length(IDs) == 0) stop('No IDs Found')
## Sequence Fetch ##
print('Fetching Sequence Data')
# a function which fetches sequence data in an xml format from NCBI based on
# ID numbers obtained from the '### ID Search ###' section; results include
# specimen accession number, taxonomy and sequence, as well as additional data
seqs <- pblapply(IDs, function(x){
tmp <- entrez_fetch(db = 'nuccore',
id = x,
rettype = 'gbc', # download 'complete' data
retmode = 'xml') # in an xml format
Sys.sleep(0.34)
unlist(tmp, use.names = FALSE)
# provides an R-friendly list of the xml data retrieved
tmp <- xmlToList(tmp)
# replaces the spaces in x with '_' to prevent the sequence label being
# truncated when creating trees
tmp$INSDSeq$INSDSeq_organism <- str_replace_all(tmp$INSDSeq$INSDSeq_organism,
'\\s', '_')
tmp
})
## Write Fasta File ##
# see `write_fasta` function below for details
if(WRITE == TRUE) {
print('Writing Fasta File')
write_fasta(seqs, GENE = GENE, OUTSIDE = OUTSIDE, ...)
}
## Save Vector of Included Taxa ##
# will save a vector, 'seqs', of combination names to the global
# environment for comparison with sequence list edited following
# clustering and visual inspection
if(REPLACEMENT == FALSE & OUTSIDE == FALSE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_[[:alpha:]]*\\..*$', '')
})
if(REPLACEMENT == FALSE & OUTSIDE == TRUE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', '')
})
}
### write_fasta ###
write_fasta <- function(x, GENE = NULL, ACCESSION = FALSE, FAMILY = FALSE,
COMBINATION = FALSE, GENUS = FALSE, COMP = FALSE,
OUTSIDE = FALSE, APPEND = FALSE){
# x -- list of sequence data downloaded from NCBI
# APPEND -- whether to append the data to an existing file or not;
#           'APPEND = TRUE' when adding replacement and outside sequences
# see below in '### Function ###' for information on other arguments
## Error Codes ##
if(ACCESSION == FALSE & FAMILY == FALSE &
COMBINATION == FALSE & GENUS == FALSE
) stop ('No labels provided for sequences; use ACCESSION,
FAMILY, COMBINATION and/or GENUS arguments to
provide labels for sequences')
if(missing(GENE)
) stop ('GENE argument missing with no default value')
## Function ##
fasta <- map_chr(x, function(x){
paste0('>',
if(ACCESSION == TRUE) paste0(x$INSDSeq$INSDSeq_locus, '_'),
if(FAMILY == TRUE) paste0(str_extract(x$INSDSeq$INSDSeq_taxonomy,
'[[:alpha:]]*aceae'), '_'),
if(COMBINATION == TRUE) str_replace(x$INSDSeq$INSDSeq_organism,
'_[[:alpha:]]*\\..*$', ''),
if(GENUS == TRUE) str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', ''),
if(COMP == TRUE) '_comp.', # for composite taxa
if(OUTSIDE == TRUE) '_OUTSIDE', # for taxa outside the research area
'\n', x$INSDSeq$INSDSeq_sequence)})
# writes files to '../results/sequences/GENE/GENE_sequences.fasta'
# or the Windows equivalent
write(fasta, file.path('..', 'results', 'sequences', GENE,
paste0(GENE, '_sequences.fasta')),
append = APPEND)
}
### del_taxa ###
del_taxa <- function(x, OUTSIDE = FALSE) {
# x -- the gene region of interest used to create the single gene tree;
#      parameter should be written inside quotations
# OUTSIDE -- whether or not we or comparing taxa outside of the research area
if(OUTSIDE == FALSE) {
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_extract(tmp$seq.name, '[[:alpha:]]*_[^_]*$')
setdiff(seqs, tmp)
} else{
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_replace(tmp$seq.name, '^.*aceae_', '')
tmp <- str_replace(tmp, '_.*$', '')
setdiff(seqs, tmp)
}
} # outputs contain the taxa removed, allowing for a replacement search
library(tidyverse) # for general data manipulation
library(rentrez) # for accessing the NCBI database
library(pbapply) # provides a timer for the apply family of functions
library(XML) # used to change xml output from NCBI to a list format
library(phylotools) # for importing and altering tree files
(data <- read_csv('nordeste.csv'))
# remove trait data and alter spaces in combination names
(data <- data %>%
select(Family:Combination) %>%
mutate(Combination = str_replace_all(Combination, ' ', '_')) %>%
slice(15:30))
### seek_seqs ###
seek_seqs <- function(x, GENE = NULL, SLEN = NULL, RET = 1,
REPLACEMENT = FALSE, OUTSIDE = FALSE,
WRITE = FALSE, ...){
# x = vector containing taxa names
# GENE -- a string containing the gene region of interest
# SLEN -- a string containing the length of desired sequences to be returned
# RET -- the sequence ID to be returned from the NCBI database;
#        defaults to the first sequence ID per species per desired gene;
#        increase if replacing anomalous sequences
# REPLACEMENT -- whether the search is being used to search
#        for replacement sequences for deleted taxa or not
# OUTSIDE -- whether the search is being used to search
#        for taxa outside of the primary research area
# WRITE -- whether to write the sequences to a fasta file or not;
#        see `write_fasta` function for details and arguments
# ... -- arguments to be passed on to the `write_fasta` function
## Error Codes ##
if(missing(GENE)) stop('GENE argument missing with no default value')
## Generate Terms ##
terms <- paste0(GENE, '[GENE] AND ',
x, '[PORG]', # search for primary organism only
if(!missing(SLEN)) {paste0(' AND ', SLEN, '[SLEN]')})
# example term: 'atpB[GENE] AND Hydrocleys_martii[PORG] AND 500:5000[SLEN]'
## ID Search ##
print('Searching for IDs')
# a function to find and create a vector of IDs from NCBI
IDs <- unique(unlist(pblapply(terms, function(x){
tmp <- entrez_search(db = 'nucleotide',
term = x,
retmax = RET)
# allow for 0.34 seconds between searches to comply with NCBI's wishes
Sys.sleep(0.34)
# create a vector of IDs found from the search of the NCBI database
if(length(tmp$ids) > (RET - 1)){
IDs <- tmp$ids[[RET]]}
})))
if(length(IDs) == 0) stop('No IDs Found')
## Sequence Fetch ##
print('Fetching Sequence Data')
# a function which fetches sequence data in an xml format from NCBI based on
# ID numbers obtained from the '### ID Search ###' section; results include
# specimen accession number, taxonomy and sequence, as well as additional data
seqs <- pblapply(IDs, function(x){
tmp <- entrez_fetch(db = 'nuccore',
id = x,
rettype = 'gbc', # download 'complete' data
retmode = 'xml') # in an xml format
Sys.sleep(0.34)
unlist(tmp, use.names = FALSE)
# provides an R-friendly list of the xml data retrieved
tmp <- xmlToList(tmp)
# replaces the spaces in x with '_' to prevent the sequence label being
# truncated when creating trees
tmp$INSDSeq$INSDSeq_organism <- str_replace_all(tmp$INSDSeq$INSDSeq_organism,
'\\s', '_')
tmp
})
## Write Fasta File ##
# see `write_fasta` function below for details
if(WRITE == TRUE) {
print('Writing Fasta File')
write_fasta(seqs, GENE = GENE, OUTSIDE = OUTSIDE, ...)
}
## Save Vector of Included Taxa ##
# will save a vector, 'seqs', of combination names to the global
# environment for comparison with sequence list edited following
# clustering and visual inspection
if(REPLACEMENT == FALSE & OUTSIDE == FALSE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_[[:alpha:]]*\\..*$', '')
})
if(REPLACEMENT == FALSE & OUTSIDE == TRUE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', '')
})
}
### write_fasta ###
write_fasta <- function(x, GENE = NULL, ACCESSION = FALSE, FAMILY = FALSE,
COMBINATION = FALSE, GENUS = FALSE, COMP = FALSE,
OUTSIDE = FALSE, APPEND = FALSE){
# x -- list of sequence data downloaded from NCBI
# APPEND -- whether to append the data to an existing file or not;
#           'APPEND = TRUE' when adding replacement and outside sequences
# see below in '### Function ###' for information on other arguments
## Error Codes ##
if(ACCESSION == FALSE & FAMILY == FALSE &
COMBINATION == FALSE & GENUS == FALSE
) stop ('No labels provided for sequences; use ACCESSION,
FAMILY, COMBINATION and/or GENUS arguments to
provide labels for sequences')
if(missing(GENE)
) stop ('GENE argument missing with no default value')
## Function ##
fasta <- map_chr(x, function(x){
paste0('>',
if(ACCESSION == TRUE) paste0(x$INSDSeq$INSDSeq_locus, '_'),
if(FAMILY == TRUE) paste0(str_extract(x$INSDSeq$INSDSeq_taxonomy,
'[[:alpha:]]*aceae'), '_'),
if(COMBINATION == TRUE) str_replace(x$INSDSeq$INSDSeq_organism,
'_[[:alpha:]]*\\..*$', ''),
if(GENUS == TRUE) str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', ''),
if(COMP == TRUE) '_comp.', # for composite taxa
if(OUTSIDE == TRUE) '_OUTSIDE', # for taxa outside the research area
'\n', x$INSDSeq$INSDSeq_sequence)})
# writes files to '../results/sequences/GENE/GENE_sequences.fasta'
# or the Windows equivalent
write(fasta, file.path('..', 'results', 'sequences', GENE,
paste0(GENE, '_sequences.fasta')),
append = APPEND)
}
### del_taxa ###
del_taxa <- function(x, OUTSIDE = FALSE) {
# x -- the gene region of interest used to create the single gene tree;
#      parameter should be written inside quotations
# OUTSIDE -- whether or not we or comparing taxa outside of the research area
if(OUTSIDE == FALSE) {
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_extract(tmp$seq.name, '[[:alpha:]]*_[^_]*$')
setdiff(seqs, tmp)
} else{
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_replace(tmp$seq.name, '^.*aceae_', '')
tmp <- str_replace(tmp, '_.*$', '')
setdiff(seqs, tmp)
}
} # outputs contain the taxa removed, allowing for a replacement search
seek_seqs(data$Combination, GENE = 'matK', SLEN = '500:5000', RET = 1,
WRITE = TRUE, ACCESSION = TRUE, FAMILY = TRUE, COMBINATION = TRUE)
# a search of the NCBI database for taxa of interest with sequence data for the
# 'atpB' gene between 500 and 5000 nucleotides in length; writes the retrieved
# data to '../results/sequences/atpB/atpB_sequences.fasta'
### seek_seqs ###
seek_seqs <- function(x, GENE = NULL, SLEN = NULL, RET = 1,
REPLACEMENT = FALSE, OUTSIDE = FALSE,
WRITE = FALSE, ...){
# x = vector containing taxa names
# GENE -- a string containing the gene region of interest
# SLEN -- a string containing the length of desired sequences to be returned
# RET -- the sequence ID to be returned from the NCBI database;
#        defaults to the first sequence ID per species per desired gene;
#        increase if replacing anomalous sequences
# REPLACEMENT -- whether the search is being used to search
#        for replacement sequences for deleted taxa or not
# OUTSIDE -- whether the search is being used to search
#        for taxa outside of the primary research area
# WRITE -- whether to write the sequences to a fasta file or not;
#        see `write_fasta` function for details and arguments
# ... -- arguments to be passed on to the `write_fasta` function
## Error Codes ##
if(missing(GENE)) stop('GENE argument missing with no default value')
## Generate Terms ##
terms <- paste0(GENE, '[GENE] AND ',
x, '[PORG]', # search for primary organism only
if(!missing(SLEN)) {paste0(' AND ', SLEN, '[SLEN]')})
# example term: 'atpB[GENE] AND Hydrocleys_martii[PORG] AND 500:5000[SLEN]'
## ID Search ##
print('Searching for IDs')
# a function to find and create a vector of IDs from NCBI
IDs <- unique(unlist(pblapply(terms, function(x){
tmp <- entrez_search(db = 'nucleotide',
term = x,
retmax = RET)
# allow for 0.34 seconds between searches to comply with NCBI's wishes
Sys.sleep(0.34)
# create a vector of IDs found from the search of the NCBI database
if(length(tmp$ids) > (RET - 1)){
IDs <- tmp$ids[[RET]]}
})))
if(length(IDs) == 0) stop('No IDs Found')
## Sequence Fetch ##
print('Fetching Sequence Data')
# a function which fetches sequence data in an xml format from NCBI based on
# ID numbers obtained from the '### ID Search ###' section; results include
# specimen accession number, taxonomy and sequence, as well as additional data
seqs <- pblapply(IDs, function(x){
tmp <- entrez_fetch(db = 'nuccore',
id = x,
rettype = 'gbc', # download 'complete' data
retmode = 'xml') # in an xml format
Sys.sleep(0.34)
unlist(tmp, use.names = FALSE)
# provides an R-friendly list of the xml data retrieved
tmp <- xmlToList(tmp)
# replaces the spaces in x with '_' to prevent the sequence label being
# truncated when creating trees
tmp$INSDSeq$INSDSeq_organism <- str_replace_all(tmp$INSDSeq$INSDSeq_organism,
'\\s', '_')
tmp
})
## Write Fasta File ##
# see `write_fasta` function below for details
if(WRITE == TRUE) {
print('Writing Fasta File')
write_fasta(seqs, GENE = GENE, OUTSIDE = OUTSIDE, ...)
}
## Save Vector of Included Taxa ##
# will save a vector, 'seqs', of combination names to the global
# environment for comparison with sequence list edited following
# clustering and visual inspection
if(REPLACEMENT == FALSE & OUTSIDE == FALSE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_[[:alpha:]]*\\..*$', '')
})
if(REPLACEMENT == FALSE & OUTSIDE == TRUE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', '')
})
print('Finished')
}
### write_fasta ###
write_fasta <- function(x, GENE = NULL, ACCESSION = FALSE, FAMILY = FALSE,
COMBINATION = FALSE, GENUS = FALSE, COMP = FALSE,
OUTSIDE = FALSE, APPEND = FALSE){
# x -- list of sequence data downloaded from NCBI
# APPEND -- whether to append the data to an existing file or not;
#           'APPEND = TRUE' when adding replacement and outside sequences
# see below in '### Function ###' for information on other arguments
## Error Codes ##
if(ACCESSION == FALSE & FAMILY == FALSE &
COMBINATION == FALSE & GENUS == FALSE
) stop ('No labels provided for sequences; use ACCESSION,
FAMILY, COMBINATION and/or GENUS arguments to
provide labels for sequences')
if(missing(GENE)
) stop ('GENE argument missing with no default value')
## Function ##
fasta <- map_chr(x, function(x){
paste0('>',
if(ACCESSION == TRUE) paste0(x$INSDSeq$INSDSeq_locus, '_'),
if(FAMILY == TRUE) paste0(str_extract(x$INSDSeq$INSDSeq_taxonomy,
'[[:alpha:]]*aceae'), '_'),
if(COMBINATION == TRUE) str_replace(x$INSDSeq$INSDSeq_organism,
'_[[:alpha:]]*\\..*$', ''),
if(GENUS == TRUE) str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', ''),
if(COMP == TRUE) '_comp.', # for composite taxa
if(OUTSIDE == TRUE) '_OUTSIDE', # for taxa outside the research area
'\n', x$INSDSeq$INSDSeq_sequence)})
# writes files to '../results/sequences/GENE/GENE_sequences.fasta'
# or the Windows equivalent
write(fasta, file.path('..', 'results', 'sequences', GENE,
paste0(GENE, '_sequences.fasta')),
append = APPEND)
}
### del_taxa ###
del_taxa <- function(x, OUTSIDE = FALSE) {
# x -- the gene region of interest used to create the single gene tree;
#      parameter should be written inside quotations
# OUTSIDE -- whether or not we or comparing taxa outside of the research area
if(OUTSIDE == FALSE) {
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_extract(tmp$seq.name, '[[:alpha:]]*_[^_]*$')
setdiff(seqs, tmp)
} else{
tmp <- phylotools::read.fasta(file.path(
'..', 'results', 'sequences', x,
paste0(x, '_sequences.fasta')))
tmp <- str_replace(tmp$seq.name, '^.*aceae_', '')
tmp <- str_replace(tmp, '_.*$', '')
setdiff(seqs, tmp)
}
} # outputs contain the taxa removed, allowing for a replacement search
seek_seqs(data$Combination, GENE = 'matK', SLEN = '500:5000', RET = 1,
WRITE = TRUE, ACCESSION = TRUE, FAMILY = TRUE, COMBINATION = TRUE)
# a search of the NCBI database for taxa of interest with sequence data for the
# 'atpB' gene between 500 and 5000 nucleotides in length; writes the retrieved
# data to '../results/sequences/atpB/atpB_sequences.fasta'
?seek_seqs
#' @param OUTSIDE whether the search is being used to search for taxa outside of
#'                the primary research area
#' @param WRITE whether to write the sequences to a fasta file or not;
#'              see `write_fasta` function for details and arguments
#' @param ... arguments to be passed to the `write_fasta function
#'
#' @return
#' @export
#'
#' @examples
seek_seqs <- function(x, GENE = NULL, SLEN = NULL, RET = 1,
REPLACEMENT = FALSE, OUTSIDE = FALSE,
WRITE = FALSE, ...){
# x = vector containing taxa names
# GENE -- a string containing the gene region of interest
# SLEN -- a string containing the length of desired sequences to be returned
# RET -- the sequence ID to be returned from the NCBI database;
#        defaults to the first sequence ID per species per desired gene;
#        increase if replacing anomalous sequences
# REPLACEMENT -- whether the search is being used to search
#        for replacement sequences for deleted taxa or not
# OUTSIDE -- whether the search is being used to search
#        for taxa outside of the primary research area
# WRITE -- whether to write the sequences to a fasta file or not;
#        see `write_fasta` function for details and arguments
# ... -- arguments to be passed on to the `write_fasta` function
## Error Codes ##
if(missing(GENE)) stop('GENE argument missing with no default value')
## Generate Terms ##
terms <- paste0(GENE, '[GENE] AND ',
x, '[PORG]', # search for primary organism only
if(!missing(SLEN)) {paste0(' AND ', SLEN, '[SLEN]')})
# example term: 'atpB[GENE] AND Hydrocleys_martii[PORG] AND 500:5000[SLEN]'
## ID Search ##
print('Searching for IDs')
# a function to find and create a vector of IDs from NCBI
IDs <- unique(unlist(pblapply(terms, function(x){
tmp <- entrez_search(db = 'nucleotide',
term = x,
retmax = RET)
# allow for 0.34 seconds between searches to comply with NCBI's wishes
Sys.sleep(0.34)
# create a vector of IDs found from the search of the NCBI database
if(length(tmp$ids) > (RET - 1)){
IDs <- tmp$ids[[RET]]}
})))
if(length(IDs) == 0) stop('No IDs Found')
## Sequence Fetch ##
print('Fetching Sequence Data')
# a function which fetches sequence data in an xml format from NCBI based on
# ID numbers obtained from the '### ID Search ###' section; results include
# specimen accession number, taxonomy and sequence, as well as additional data
seqs <- pblapply(IDs, function(x){
tmp <- entrez_fetch(db = 'nuccore',
id = x,
rettype = 'gbc', # download 'complete' data
retmode = 'xml') # in an xml format
Sys.sleep(0.34)
unlist(tmp, use.names = FALSE)
# provides an R-friendly list of the xml data retrieved
tmp <- xmlToList(tmp)
# replaces the spaces in x with '_' to prevent the sequence label being
# truncated when creating trees
tmp$INSDSeq$INSDSeq_organism <- str_replace_all(tmp$INSDSeq$INSDSeq_organism,
'\\s', '_')
tmp
})
## Write Fasta File ##
# see `write_fasta` function below for details
if(WRITE == TRUE) {
print('Writing Fasta File')
write_fasta(seqs, GENE = GENE, OUTSIDE = OUTSIDE, ...)
}
## Save Vector of Included Taxa ##
# will save a vector, 'seqs', of combination names to the global
# environment for comparison with sequence list edited following
# clustering and visual inspection
if(REPLACEMENT == FALSE & OUTSIDE == FALSE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_[[:alpha:]]*\\..*$', '')
})
if(REPLACEMENT == FALSE & OUTSIDE == TRUE)
seqs <<- map_chr(seqs, function(x){
str_replace(x$INSDSeq$INSDSeq_organism, '_.*$', '')
})
print('Finished')
}
?seek_seqs
devtools::document()
